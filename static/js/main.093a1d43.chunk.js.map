{"version":3,"sources":["logo.svg","components/Task.js","components/Input.js","Pages/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Task","state","active","changeTaskState","_this","setState","_this2","this","react_default","a","createElement","className","onClick","props","task","index_es","icon","faTrash","Component","Input","onSubmit","addToList","onChange","e","changeInput","target","value","type","placeholder","faPlus","ToDoList","input","list","preventDefault","listArray","push","deleteTask","removeItemFromArr","arr","item","filter","components_Input","map","tasks","key","id","components_Task","App","Pages_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NC8CzBC,oNAxCXC,MAAM,CACFC,QAAO,KAEXC,gBAAgB,WACTC,EAAKH,MAAMC,OACVE,EAAKC,SAAS,CACVH,QAAO,IAIXE,EAAKC,SACD,CACIH,QAAO,6EAKf,IAAAI,EAAAC,KACJ,OAAGA,KAAKN,MAAMC,OAENM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASL,KAAKJ,iBAAkBI,KAAKM,MAAMC,MACtEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBJ,UAAU,QAAQK,KAAMC,IAASL,QAAS,WACvDN,EAAKO,MAAMD,QAAQN,EAAKO,MAAMC,UAOtCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,QAASL,KAAKJ,iBAAiBK,EAAAC,EAAAC,cAAA,WAAMH,KAAKM,MAAMC,OAC3EN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBJ,UAAU,QAAQK,KAAMC,IAASL,QAAS,WACvDN,EAAKO,MAAMD,QAAQN,EAAKO,MAAMC,iBAlCnCI,cCmBJC,mLAnBH,IAAAf,EAAAG,KACJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0CAA0CS,SAAUb,KAAKM,MAAMQ,WAC3Eb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,SAAOY,SAAU,SAACC,GACdnB,EAAKS,MAAMW,YAAYD,EAAEE,OAAOC,QAEpCA,MAAOnB,KAAKM,MAAMa,MAClBC,KAAK,OAAOhB,UAAU,eAAeiB,YAAY,mBAEjDpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKM,MAAMQ,UAAWM,KAAK,SAAShB,UAAU,oBAAmBH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMa,iBAb7GX,aCgDLY,6MAhDX7B,MAAM,CACF8B,MAAM,GACNC,KAAK,MAETR,YAAY,SAACO,GACT3B,EAAKC,SAAS,CACV0B,MAAMA,OAGdV,UAAU,SAACE,GAEP,GADAA,EAAEU,iBACC7B,EAAKH,MAAM8B,MAAM,CAChB,IAAIG,EAAU9B,EAAKH,MAAM+B,KACzBE,EAAUC,KAAK/B,EAAKH,MAAM8B,OAC1B3B,EAAKC,SAAS,CACV2B,KAAKE,EACLH,MAAM,SASlBK,WAAW,SAACtB,GACR,IAAIoB,EAAU9B,EAAKiC,kBAAkBjC,EAAKH,MAAM+B,KAAKlB,GACrDV,EAAKC,SAAS,CACV2B,KAAKE,sFARMI,EAAKC,GACpB,OAAOD,EAAIE,OAAQ,SAAUjB,GACzB,OAAOA,IAAMgB,qCASb,IAAAjC,EAAAC,KACJ,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACPH,EAAAC,EAAAC,cAAC+B,EAAD,CAAOpB,UAAWd,KAAKc,UAAWG,YAAajB,KAAKiB,YAAaE,MAAOnB,KAAKN,MAAM8B,SAE3FvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACNJ,KAAKN,MAAM+B,KAAKU,IAAI,SAAAC,GAAK,OACtBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCAAwCiC,IAAKD,EAAME,IAC9DrC,EAAAC,EAAAC,cAACoC,EAAD,CAAMhC,KAAM6B,EAAO/B,QAASN,EAAK8B,yBAzC9ClB,mBCaR6B,MARf,WACE,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACsC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.093a1d43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {Component} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport './styles/Task.css'\r\n\r\nclass Task extends Component{\r\n    state={\r\n        active:true\r\n    }\r\n    changeTaskState=()=>{\r\n        if(this.state.active){\r\n            this.setState({\r\n                active:false\r\n            })\r\n        }\r\n        else{\r\n            this.setState(\r\n                {\r\n                    active:true\r\n                }\r\n            )\r\n        }\r\n    }\r\n    render(){\r\n        if(this.state.active){\r\n            return(\r\n                <div className='task pl-4 pr-4'>\r\n                    <h5 className='task-title' onClick={this.changeTaskState}>{this.props.task}</h5>\r\n                    <FontAwesomeIcon className='icono' icon={faTrash} onClick={()=>{\r\n                        this.props.onClick(this.props.task)\r\n                    }}/>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div className='task pl-4 pr-4'>\r\n                    <h5 className='task-title' onClick={this.changeTaskState}><del>{this.props.task}</del></h5>\r\n                    <FontAwesomeIcon className='icono' icon={faTrash} onClick={()=>{\r\n                        this.props.onClick(this.props.task)\r\n                    }}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Task","import React , {Component} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Input extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"col-12\">\r\n                <form className=\"input-group mb-3 justify-content-center\" onSubmit={this.props.addToList}>\r\n                    <div className=\"input-group-append\">\r\n                    <input onChange={(e)=>{\r\n                        this.props.changeInput(e.target.value)\r\n                    }}\r\n                    value={this.props.value}  \r\n                    type=\"text\" className='form-control' placeholder='Agergar Tarea'/>\r\n                    </div>\r\n                    <div className=\"input-group-append\">\r\n                        <button onClick={this.props.addToList} type='button' className=\"input-group-text\"><FontAwesomeIcon icon={faPlus}/></button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input","import React, {Component} from 'react'\r\nimport Task from '../components/Task'\r\nimport Input from '../components/Input'\r\nclass ToDoList extends Component{\r\n    state={\r\n        input:'',\r\n        list:[]\r\n    }\r\n    changeInput=(input)=>{\r\n        this.setState({\r\n            input:input\r\n        })\r\n    }\r\n    addToList=(e)=>{\r\n        e.preventDefault()\r\n        if(this.state.input){\r\n            let listArray=this.state.list\r\n            listArray.push(this.state.input)\r\n            this.setState({\r\n                list:listArray,\r\n                input:''\r\n            })\r\n        }\r\n    }\r\n    removeItemFromArr( arr, item ) {\r\n        return arr.filter( function( e ) {\r\n            return e !== item;\r\n        } );\r\n    };\r\n    deleteTask=(task)=>{\r\n        let listArray=this.removeItemFromArr(this.state.list,task)\r\n        this.setState({\r\n            list:listArray,\r\n        })\r\n}\r\n    render(){\r\n        return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                            <Input addToList={this.addToList} changeInput={this.changeInput} value={this.state.input}/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                            {this.state.list.map(tasks=>(\r\n                                <div className='col-4 offset-4 text-center form-group' key={tasks.id}>\r\n                                    <Task task={tasks} onClick={this.deleteTask} />\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\nexport default ToDoList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Task from './components/Task'\nimport ToDoList from './Pages/ToDoList'\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nfunction App() {\n  return (\n    <div className=\"wrap pt-4\">\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}